import VideoContextVisualisation from '../../dist/visualise-videocontext.bundle.js'
import VideoContext from 'videocontext'
import bunny from 'file-loader!./big_buck_bunny.mp4'

const vc = new VideoContext(document.getElementById('canvas'))

const video = vc.video(bunny)
video.start(0)
video.stop(20)

const transition = vc.transition(VideoContext.DEFINITIONS.CROSSFADE)
transition.transition(0, 0, 0, 1, 'mix')
transition.transition(5, 8, 1, 0, 'mix')

const eff = vc.effect(VideoContext.DEFINITIONS.MONOCHROME)

const comp = vc.compositor(VideoContext.DEFINITIONS.COMBINE)

video.connect(eff)
video.connect(comp)
eff.connect(transition)
comp.connect(transition)
transition.connect(vc.destination)

vc.play()

// const json = JSON.parse(VideoContext.exportToJSON(vc))
const json = {'source0': {'type': 'VideoNode', 'url': '', 'start': 0, 'stop': null}, 'source1': {'type': 'VideoNode', 'url': '', 'start': 0, 'stop': null}, 'processor0': {'type': 'CompositingNode', 'definition': {'title': 'Combine', 'description': 'A basic effect which renders the input to the output, Typically used as a combine node for layering up media with alpha transparency.', 'vertexShader': '\t            attribute vec2 a_position;\t            attribute vec2 a_texCoord;\t            varying vec2 v_texCoord;\t            void main() {\t                gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t                v_texCoord = a_texCoord;\t            }', 'fragmentShader': '\t            precision mediump float;\t            uniform sampler2D u_image;\t            uniform float a;\t            varying vec2 v_texCoord;\t            varying float v_mix;\t            void main(){\t                vec4 color = texture2D(u_image, v_texCoord);\t                gl_FragColor = color;\t            }', 'properties': {'a': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image']}, 'inputs': [{'id': 'source0', 'index': 0}], 'properties': {'a': 0}}, 'processor1': {'type': 'CompositingNode', 'definition': {'title': 'Combine', 'description': 'A basic effect which renders the input to the output, Typically used as a combine node for layering up media with alpha transparency.', 'vertexShader': '\t            attribute vec2 a_position;\t            attribute vec2 a_texCoord;\t            varying vec2 v_texCoord;\t            void main() {\t                gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t                v_texCoord = a_texCoord;\t            }', 'fragmentShader': '\t            precision mediump float;\t            uniform sampler2D u_image;\t            uniform float a;\t            varying vec2 v_texCoord;\t            varying float v_mix;\t            void main(){\t                vec4 color = texture2D(u_image, v_texCoord);\t                gl_FragColor = color;\t            }', 'properties': {'a': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image']}, 'inputs': [{'id': 'processor4', 'index': 0}, {'id': 'processor6', 'index': 1}, {'id': 'processor8', 'index': 2}], 'properties': {'a': 0}}, 'processor2': {'type': 'CompositingNode', 'definition': {'title': 'Combine', 'description': 'A basic effect which renders the input to the output, Typically used as a combine node for layering up media with alpha transparency.', 'vertexShader': '\t            attribute vec2 a_position;\t            attribute vec2 a_texCoord;\t            varying vec2 v_texCoord;\t            void main() {\t                gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t                v_texCoord = a_texCoord;\t            }', 'fragmentShader': '\t            precision mediump float;\t            uniform sampler2D u_image;\t            uniform float a;\t            varying vec2 v_texCoord;\t            varying float v_mix;\t            void main(){\t                vec4 color = texture2D(u_image, v_texCoord);\t                gl_FragColor = color;\t            }', 'properties': {'a': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image']}, 'inputs': [{'id': 'source1', 'index': 0}], 'properties': {'a': 0}}, 'processor3': {'type': 'CompositingNode', 'definition': {'title': 'Combine', 'description': 'A basic effect which renders the input to the output, Typically used as a combine node for layering up media with alpha transparency.', 'vertexShader': '\t            attribute vec2 a_position;\t            attribute vec2 a_texCoord;\t            varying vec2 v_texCoord;\t            void main() {\t                gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t                v_texCoord = a_texCoord;\t            }', 'fragmentShader': '\t            precision mediump float;\t            uniform sampler2D u_image;\t            uniform float a;\t            varying vec2 v_texCoord;\t            varying float v_mix;\t            void main(){\t                vec4 color = texture2D(u_image, v_texCoord);\t                gl_FragColor = color;\t            }', 'properties': {'a': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image']}, 'inputs': [{'id': 'processor2', 'index': 0}], 'properties': {'a': 0}}, 'processor4': {'type': 'TransitionNode', 'definition': {'title': 'Cross-Fade', 'description': 'A cross-fade effect. Typically used as a transistion.', 'vertexShader': '\t    attribute vec2 a_position;\t    attribute vec2 a_texCoord;\t    varying vec2 v_texCoord;\t    void main() {\t        gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t        v_texCoord = a_texCoord;\t    }', 'fragmentShader': '\t    precision mediump float;\t    uniform sampler2D u_image_a;\t    uniform sampler2D u_image_b;\t    uniform float mix;\t    varying vec2 v_texCoord;\t    varying float v_mix;\t    void main(){\t        vec4 color_a = texture2D(u_image_a, v_texCoord);\t        vec4 color_b = texture2D(u_image_b, v_texCoord);\t        color_a[0] *= (1.0 - mix);\t        color_a[1] *= (1.0 - mix);\t        color_a[2] *= (1.0 - mix);\t        color_a[3] *= (1.0 - mix);\t        color_b[0] *= mix;\t        color_b[1] *= mix;\t        color_b[2] *= mix;\t        color_b[3] *= mix;\t        gl_FragColor = color_a + color_b;\t    }', 'properties': {'mix': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image_a', 'u_image_b']}, 'inputs': [{'id': 'processor3', 'index': 0}], 'properties': {'mix': 0}, 'transitions': {'mix': [{'start': 0, 'end': 0, 'current': 1, 'target': 0, 'property': 'mix'}, {'start': 1, 'end': 1, 'current': 0, 'target': 1, 'property': 'mix'}]}}, 'processor5': {'type': 'CompositingNode', 'definition': {'title': 'Combine', 'description': 'A basic effect which renders the input to the output, Typically used as a combine node for layering up media with alpha transparency.', 'vertexShader': '\t            attribute vec2 a_position;\t            attribute vec2 a_texCoord;\t            varying vec2 v_texCoord;\t            void main() {\t                gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t                v_texCoord = a_texCoord;\t            }', 'fragmentShader': '\t            precision mediump float;\t            uniform sampler2D u_image;\t            uniform float a;\t            varying vec2 v_texCoord;\t            varying float v_mix;\t            void main(){\t                vec4 color = texture2D(u_image, v_texCoord);\t                gl_FragColor = color;\t            }', 'properties': {'a': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image']}, 'inputs': [{'id': 'processor0', 'index': 0}], 'properties': {'a': 0}}, 'processor6': {'type': 'TransitionNode', 'definition': {'title': 'Cross-Fade', 'description': 'A cross-fade effect. Typically used as a transistion.', 'vertexShader': '\t    attribute vec2 a_position;\t    attribute vec2 a_texCoord;\t    varying vec2 v_texCoord;\t    void main() {\t        gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t        v_texCoord = a_texCoord;\t    }', 'fragmentShader': '\t    precision mediump float;\t    uniform sampler2D u_image_a;\t    uniform sampler2D u_image_b;\t    uniform float mix;\t    varying vec2 v_texCoord;\t    varying float v_mix;\t    void main(){\t        vec4 color_a = texture2D(u_image_a, v_texCoord);\t        vec4 color_b = texture2D(u_image_b, v_texCoord);\t        color_a[0] *= (1.0 - mix);\t        color_a[1] *= (1.0 - mix);\t        color_a[2] *= (1.0 - mix);\t        color_a[3] *= (1.0 - mix);\t        color_b[0] *= mix;\t        color_b[1] *= mix;\t        color_b[2] *= mix;\t        color_b[3] *= mix;\t        gl_FragColor = color_a + color_b;\t    }', 'properties': {'mix': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image_a', 'u_image_b']}, 'inputs': [{'id': 'processor5', 'index': 0}], 'properties': {'mix': 0}, 'transitions': {'mix': [{'start': 0, 'end': 0, 'current': 0, 'target': 1, 'property': 'mix'}, {'start': 1, 'end': 1, 'current': 1, 'target': 0, 'property': 'mix'}, {'start': 15, 'end': 15, 'current': 0, 'target': 1, 'property': 'mix'}]}}, 'processor7': {'type': 'CompositingNode', 'definition': {'title': 'Combine', 'description': 'A basic effect which renders the input to the output, Typically used as a combine node for layering up media with alpha transparency.', 'vertexShader': '\t            attribute vec2 a_position;\t            attribute vec2 a_texCoord;\t            varying vec2 v_texCoord;\t            void main() {\t                gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t                v_texCoord = a_texCoord;\t            }', 'fragmentShader': '\t            precision mediump float;\t            uniform sampler2D u_image;\t            uniform float a;\t            varying vec2 v_texCoord;\t            varying float v_mix;\t            void main(){\t                vec4 color = texture2D(u_image, v_texCoord);\t                gl_FragColor = color;\t            }', 'properties': {'a': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image']}, 'inputs': [{'id': 'processor0', 'index': 0}], 'properties': {'a': 0}}, 'processor8': {'type': 'TransitionNode', 'definition': {'title': 'Cross-Fade', 'description': 'A cross-fade effect. Typically used as a transistion.', 'vertexShader': '\t    attribute vec2 a_position;\t    attribute vec2 a_texCoord;\t    varying vec2 v_texCoord;\t    void main() {\t        gl_Position = vec4(vec2(2.0,2.0)*a_position-vec2(1.0, 1.0), 0.0, 1.0);\t        v_texCoord = a_texCoord;\t    }', 'fragmentShader': '\t    precision mediump float;\t    uniform sampler2D u_image_a;\t    uniform sampler2D u_image_b;\t    uniform float mix;\t    varying vec2 v_texCoord;\t    varying float v_mix;\t    void main(){\t        vec4 color_a = texture2D(u_image_a, v_texCoord);\t        vec4 color_b = texture2D(u_image_b, v_texCoord);\t        color_a[0] *= (1.0 - mix);\t        color_a[1] *= (1.0 - mix);\t        color_a[2] *= (1.0 - mix);\t        color_a[3] *= (1.0 - mix);\t        color_b[0] *= mix;\t        color_b[1] *= mix;\t        color_b[2] *= mix;\t        color_b[3] *= mix;\t        gl_FragColor = color_a + color_b;\t    }', 'properties': {'mix': {'type': 'uniform', 'value': 0}}, 'inputs': ['u_image_a', 'u_image_b']}, 'inputs': [{'id': 'processor7', 'index': 0}], 'properties': {'mix': 0}, 'transitions': {'mix': [{'start': 0, 'end': 0, 'current': 0, 'target': 1, 'property': 'mix'}, {'start': 15, 'end': 15, 'current': 1, 'target': 0, 'property': 'mix'}]}}, 'destination': {'type': 'Destination', 'inputs': [{'id': 'processor1', 'index': 0}]}}

const canvas = document.getElementById('vis')
const vis = new VideoContextVisualisation(canvas)

vis.setValues(json)
vis.render()

setInterval(() => {
    // const json = JSON.parse(VideoContext.exportToJSON(vc))
    // vis.setValues(json)
}, 100)
